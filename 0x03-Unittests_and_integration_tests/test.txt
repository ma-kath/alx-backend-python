class TestGithubOrgClient(unittest.TestCase):
    """Test case for GithubOrgClient class."""
    def test_public_repos_url(self):
        """Test to return the correct URL."""
        test_playload = {
            "repos_url": "https://api.github.com/orgs/google/repos"
        }
        client = GithubOrgClient("testorg")
        with patch.object(
            type(client),
            "org",
            new_callable=property
        ) as mock_org:
            mock_org.return_value = test_playload
            result = client._public_repos_url
            self.assertEqual(result, test_playload["repos_url"])


@parameterized_class([
    {
        "org_payload": fixtures.org_payload,
        "repos_payload": fixtures.repos_payload,
        "expected_repos": fixtures.expected_repos,
        "apache2_repos": fixtures.apache2_repos,
    }
])
class TestIntegrationGithubOrgClient(unittest.TestCase):
    """Integration test for GithubOrgClient.public_repos with mocked requests.get"""
    @classmethod
    def setUpClass(cls):
        cls.get_patcher = patch("requests.get")
        mock_get = cls.get_patcher.start()
        def get_json_side_effect(url, *args, **kargs):
            mock_resp = MagicMock()
            blanc_url = f"https://api.github.com/orgs/{cls.org_payload['login']}"
            if url == cls.org_payload["url"] or url == blanc_url:
                mock_resp.json.return_value = cls.org_payload
            elif url == cls.org_payload["repos_url"]:
                mock_resp.json.return_value = cls.repos_payload
            else:
                mock_resp.json.return_value = []
            return mock_resp
        mock_get.side_effect = get_json_side_effect
    
    @classmethod
    def tearDownClass(cls):
        cls.get_patcher.stop()
        
    def test_public_repos(self):
        """Test that public_repos returns their names."""
        client = GithubOrgClient(self.org_payload["login"])
        repos = client.public_repos()
        self.assertEqual(repos, self.expected_repos)
        
    def test_public_repos_with_license(self):
        """Test public_repos with license filtering."""
        client = GithubOrgClient(self.org_payload["login"])
        repos = client.public_repos(license="apache-2.0")
        self.assertEqual(repos, self.apache2_repos)